# -*- coding: utf-8 -*-
"""Home Credit Default Risk_XGBoost0.79020.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12p_saSPoreT2UrhJdvR1dqIraaBX0Geh
"""

import pandas as pd
import numpy as np
from sklearn.metrics import roc_auc_score
import random
import xgboost as xgb
from sklearn.model_selection import StratifiedKFold
from scipy.stats.mstats import gmean

import gc
import warnings
warnings.filterwarnings('ignore')

! gdown 1xDvGxcgWi-c1ySGq8Txgoedyk1OG6lVg

! gdown 1KpOSWtFjsO-NwTWkwy-Tsr0Z3hrBp9h6

! gdown 1dVTuMbcQwYppTr9LeGe3-Aq7EAB0N7qH

train=pd.read_csv('HC_train.csv')
test=pd.read_csv('HC_test.csv')

def AUC(y_true, y_score):
  return roc_auc_score(y_true, y_score)

def seed_everything(seed=0):
    random.seed(seed)
    np.random.seed(seed)

X=train.drop('TARGET', axis=1)
y=train['TARGET']
X_test=test

SEED=2022
seed_everything(SEED)

params = {
     "n_estimators":5000,
        "max_depth":8,
        "learning_rate":0.05,
        "subsample":1,
        "colsample_bytree":0.1,
        "missing":-1,
        "eval_metric":'auc',
        "reg_lambda":50,
        "min_child_weight":2,
        "gamma":0,
        "scale_pos_weight":1,
        # USE CPU
        #nthread=4,
        #tree_method='hist'
        # USE GPU
        "tree_method":'gpu_hist'
}

NFOLDS=5
seed_range=3
skf=StratifiedKFold(n_splits=NFOLDS, shuffle=True, random_state=SEED)

preds_seed=np.zeros((X_test.shape[0],seed_range))
val_preds_seed=np.zeros((X.shape[0],seed_range))

for i, s in enumerate(range(SEED, SEED+seed_range)):
  print('SEED:', s)
  preds = np.zeros((X_test.shape[0], NFOLDS))
  val_preds=np.zeros(X.shape[0])
  seed_everything(s)
  params['random_state'] = s
  
  for j, (train_idx, test_idx) in enumerate(skf.split(X, y)):
    fold = j + 1
    print('Fold:',fold,'\n')

    kf_X_train=X.iloc[train_idx]
    kf_y_train=y.iloc[train_idx]
    
    kf_X_test=X.iloc[test_idx]
    kf_y_test=y.iloc[test_idx]

    classifier=xgb.XGBClassifier(**params)
    classifier.fit(kf_X_train,kf_y_train, eval_set=[(kf_X_train,kf_y_train), (kf_X_test,kf_y_test)],
                   early_stopping_rounds=500,eval_metric='auc',verbose=100)
                
    val_preds[test_idx]+= classifier.predict_proba(kf_X_test)[:,1]
    preds[:, j] = classifier.predict_proba(X_test)[:,1]
      
  preds=gmean(preds, axis=1)
  preds_seed[:,i]=preds
  val_preds_seed[:,i]=val_preds

preds_proba=gmean(preds_seed, axis=1)
val_preds_seed_proba=gmean(val_preds_seed, axis=1)

np.save('pred_XGB.npy', preds_proba)
np.save('val_pred_XGB.npy', val_preds_seed_proba)

#def to_labels(pos_probs, threshold):
#	return (pos_probs >= threshold).astype('int')
 
#thresholds = np.arange(0, 1, 0.001)
#scores = [AUC(y, to_labels(val_preds_seed_proba, t)) for t in thresholds]
#ix = np.argmax(scores)
#print('Threshold=%.3f, AUC=%.5f' % (thresholds[ix], scores[ix]))

#preds=np.where(preds_proba<thresholds[ix], 0, 1)

submission=pd.read_csv('sample_submission.csv')

#submission['TARGET']=preds

submission['TARGET']=preds_proba

submission.to_csv('submission_XGB.csv', index=False)

from google.colab import files

files.download('submission_XGB.csv')